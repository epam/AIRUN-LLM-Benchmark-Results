import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from './store/store';\nimport { Todo } from './models/todoModel';\nimport { TodoItem } from './components/TodoItem';\nimport { TodoFooter } from './components/TodoFooter';\nimport { toggleAll, clearCompleted, setFilter } from './store/todoSlice';\nimport { ALL_TODOS, ACTIVE_TODOS, COMPLETED_TODOS } from './constants';\n\ninterface AppProps {}\n\nexport const TodoApp: React.FC<AppProps> = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector((state: RootState) => state.todos.todos);\n  const filter = useSelector((state: RootState) => state.todos.filter);
  const [newTodo, setNewTodo] = React.useState('');
\n  const handleNewTodoKeyDown = (event: React.KeyboardEvent) => {\n    if (event.key !== 'Enter') {\n      return;\n    }\n\n    if (newTodo.trim()) {\n      dispatch(addTodo(newTodo.trim()));\n      setNewTodo('');\n    }\n  };\n\n  const handleToggleAll = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(toggleAll(event.target.checked));\n  };\n\n  const handleClearCompleted = () => {\n    dispatch(clearCompleted());\n  };\n\n  const activeTodoCount = todos.reduce((accum, todo) => todo.completed ? accum : accum + 1, 0);\n  const completedCount = todos.length - activeTodoCount;\n\n  const shownTodos = todos.filter((todo) => {\n    switch (filter) {\n      case ACTIVE_TODOS:\n        return !todo.completed;\n      case COMPLETED_TODOS:\n        return todo.completed;\n      default:\n        return true;\n    }\n  });\n\n  const todoItems = shownTodos.map((todo) => (\n    <TodoItem key={todo.id} todo={todo} />\n  ));\n\n  return (\n    <div>\n      <header className="header">\n        <h1>todos</h1>\n        <input\n          className="new-todo"\n          placeholder="What needs to be done?"\n          onKeyDown={handleNewTodoKeyDown}\n          value={newTodo}\n          onChange={(e) => setNewTodo(e.target.value)}\n          autoFocus\n        />\n      </header>\n      {todos.length ? (\n        <section className="main">\n          <input\n            id="toggle-all"\n            className="toggle-all"\n            type="checkbox"\n            onChange={handleToggleAll}\n            checked={activeTodoCount === 0}\n          />\n          <label htmlFor="toggle-all">Mark all as complete</label>\n          <ul className="todo-list">{todoItems}</ul>\n        </section>\n      ) : null}\n      {todos.length ? (\n        <TodoFooter\n          count={activeTodoCount}\n          completedCount={completedCount}\n          nowShowing={filter}\n          onClearCompleted={handleClearCompleted}\n        />\n      ) : null}\n    </div>\n  );\n};