import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { nanoid } from 'nanoid';\nimport { RootState } from './store';\nimport { Todo } from '../models/todoModel';\n\nexport interface TodoState {\n  todos: Todo[];\n  filter: 'all' | 'active' | 'completed';\n}\n\nconst initialState: TodoState = {\n  todos: [],\n  filter: 'all',\n};\n\nexport const todoSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    addTodo: (state, action: PayloadAction<string>) => {\n      state.todos.push({\n        id: nanoid(),\n        title: action.payload,\n        completed: false,\n      }); \n    },\n    toggleTodo: (state, action: PayloadAction<string>) => {\n      const todo = state.todos.find((todo) => todo.id === action.payload);\n      if (todo) {\n        todo.completed = !todo.completed;\n      }\n    },\n    deleteTodo: (state, action: PayloadAction<string>) => {\n      state.todos = state.todos.filter((todo) => todo.id !== action.payload);\n    },\n    editTodo: (state, action: PayloadAction<{ id: string; text: string }>) => {\n      const todo = state.todos.find((todo) => todo.id === action.payload.id);\n      if (todo) {\n        todo.title = action.payload.text;\n      }\n    },\n    toggleAll: (state, action: PayloadAction<boolean>) => {\n      state.todos.forEach((todo) => {\n        todo.completed = action.payload;\n      });\n    },\n    clearCompleted: (state) => {\n      state.todos = state.todos.filter((todo) => !todo.completed);\n    },\n    setFilter: (state, action: PayloadAction<'all' | 'active' | 'completed'>) => {\n      state.filter = action.payload;\n    },\n  },\n});\n\nexport const {\n  addTodo,\n  toggleTodo,\n  deleteTodo,\n  editTodo,\n  toggleAll,\n  clearCompleted,\n  setFilter,\n} = todoSlice.actions;\n\nexport const selectTodos = (state: RootState) => state.todos.todos;\nexport const selectFilter = (state: RootState) => state.todos.filter;\n\nexport default todoSlice.reducer;