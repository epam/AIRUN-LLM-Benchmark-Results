{
  "anthropic_version": "vertex-2023-10-16",
  "max_tokens": 4096,
  "temperature": 0,
  "stream": false,
  "system": "As an AI proficient in software engineering, particularly in Frontend development, React and Angular, your objective is to resolve the provided development tasks.",
  "messages": [
    {
      "role": "user",
      "content": "Your task is to translate outdated AngularJS app code to recent version of React using functional components and hooks.\nOutdated application is composed of the following files:\n\njs/controllers/todo.js\njs/directives/todoEscape.js\njs/directives/todoFocus.js\njs/services/todoStorage.js\njs/app.js\njs/main.js\nindex.html\n\nYour task is to request content of each file and analyze its implementation.\nYou should ask for files content by the command: \"Give me the content of <file.extenstion>\"\n\nAfter getting and analyzing of all file's content - think thoroughly and *return only new file structure* of translated React application in a form of list. \nAfter you return the file structure of the updated application, I will request you for each file by its number in the list\n\nApply these instructions for translated application:\n- Use the following libraries: TypeScript, Redux Toolkit with createSlice, and nanoid.\n- Provide configuration of the store and provider if needed.\n- Split the code into separate components.\n- Optimize the code where possible.\n- The converted code should not contain any TODOs.\n- Return the translated code as markdown code snippets.\n- Simply return the codebase without additional comments or explanations on how to convert it.\n\nExample of response where number is an alias for file:\n1 - ./App.tsx\n2 - ./constants.ts\n3 - ..\n\nDo not add any comments in generated code and follow the instructions precisely.\n"
    },
    {
      "content": "Give me the content of js/controllers/todo.js",
      "role": "assistant"
    },
    {
      "role": "user",
      "content": "/*global define*/\n'use strict';\n\n/**\n * The main controller for the app. The controller:\n * - retrieves and persist the model via the todoStorage service\n * - exposes the model to the template and provides event handlers\n */\n\ndefine([\n\t'angular'\n], function (angular) {\n\treturn ['$scope', '$location', 'todoStorage', 'filterFilter',\n\t\tfunction ($scope, $location, todoStorage, filterFilter) {\n\t\t\tvar todos = $scope.todos = todoStorage.get();\n\n\t\t\t$scope.newTodo = '';\n\t\t\t$scope.editedTodo = null;\n\n\t\t\t$scope.$watch('todos', function () {\n\t\t\t\t$scope.remainingCount = filterFilter(todos, { completed: false }).length;\n\t\t\t\t$scope.doneCount = todos.length - $scope.remainingCount;\n\t\t\t\t$scope.allChecked = !$scope.remainingCount;\n\t\t\t\ttodoStorage.put(todos);\n\t\t\t}, true);\n\n\t\t\tif ($location.path() === '') {\n\t\t\t\t$location.path('/');\n\t\t\t}\n\n\t\t\t$scope.location = $location;\n\n\t\t\t$scope.$watch('location.path()', function (path) {\n\t\t\t\t$scope.statusFilter = (path === '/active') ?\n\t\t\t\t\t{ completed: false } : (path === '/completed') ?\n\t\t\t\t\t{ completed: true } : null;\n\t\t\t});\n\n\n\t\t\t$scope.addTodo = function () {\n\t\t\t\tvar newTodo = $scope.newTodo.trim();\n\t\t\t\tif (!newTodo.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttodos.push({\n\t\t\t\t\ttitle: newTodo,\n\t\t\t\t\tcompleted: false\n\t\t\t\t});\n\n\t\t\t\t$scope.newTodo = '';\n\t\t\t};\n\n\n\t\t\t$scope.editTodo = function (todo) {\n\t\t\t\t$scope.editedTodo = todo;\n\t\t\t\t// Clone the original todo to restore it on demand.\n\t\t\t\t$scope.originalTodo = angular.copy(todo);\n\t\t\t};\n\n\n\t\t\t$scope.doneEditing = function (todo) {\n\t\t\t\t$scope.editedTodo = null;\n\t\t\t\ttodo.title = todo.title.trim();\n\n\t\t\t\tif (!todo.title) {\n\t\t\t\t\t$scope.removeTodo(todo);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t$scope.revertEditing = function (todo) {\n\t\t\t\ttodos[todos.indexOf(todo)] = $scope.originalTodo;\n\t\t\t\t$scope.doneEditing($scope.originalTodo);\n\t\t\t};\n\n\t\t\t$scope.removeTodo = function (todo) {\n\t\t\t\ttodos.splice(todos.indexOf(todo), 1);\n\t\t\t};\n\n\n\t\t\t$scope.clearDoneTodos = function () {\n\t\t\t\t$scope.todos = todos = todos.filter(function (val) {\n\t\t\t\t\treturn !val.completed;\n\t\t\t\t});\n\t\t\t};\n\n\n\t\t\t$scope.markAll = function (done) {\n\t\t\t\ttodos.forEach(function (todo) {\n\t\t\t\t\ttodo.completed = done;\n\t\t\t\t});\n\t\t\t};\n\t\t}\n\t];\n});\n"
    },
    {
      "content": "Give me the content of js/directives/todoEscape.js",
      "role": "assistant"
    },
    {
      "role": "user",
      "content": "/*global define*/\n'use strict';\n\n/**\n * Directive that catches the \"Escape\" key on the element applied to and evaluates the expression it binds to.\n */\n\ndefine([\n\t'angular'\n], function (angular) {\n\tvar moduleName = 'TodoEscapeDirective';\n\tangular\n\t\t.module(moduleName, [])\n\t\t.directive('todoEscape', function () {\n\t\t\tvar ESCAPE_KEY = 27;\n\n\t\t\treturn function (scope, elem, attrs) {\n\t\t\t\telem.bind('keydown', function (event) {\n\t\t\t\t\tif (event.keyCode === ESCAPE_KEY) {\n\t\t\t\t\t\tscope.$apply(attrs.todoEscape);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tscope.$on('$destroy', function () {\n\t\t\t\t\telem.unbind('keydown');\n\t\t\t\t});\n\t\t\t};\n\t\t});\n\treturn moduleName;\n});\n"
    },
    {
      "content": "Give me the content of js/directives/todoFocus.js",
      "role": "assistant"
    },
    {
      "role": "user",
      "content": "/*global define*/\n'use strict';\n\n/**\n * Directive that places focus on the element it is applied to when the expression it binds to evaluates to true.\n */\n \ndefine([\n\t'angular'\n], function (angular) {\n\tvar moduleName = 'TodoFocusDirective';\n\tangular\n\t\t.module(moduleName, [])\n\t\t.directive('todoFocus', ['$timeout', function ($timeout) {\n\t\t\treturn function (scope, elem, attrs) {\n\t\t\t\tscope.$watch(attrs.todoFocus, function (newval) {\n\t\t\t\t\tif (newval) {\n\t\t\t\t\t\t$timeout(function () {\n\t\t\t\t\t\t\telem[0].focus();\n\t\t\t\t\t\t}, 0, false);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t};\n\t\t}]);\n\treturn moduleName;\n});\n"
    },
    {
      "content": "Give me the content of js/services/todoStorage.js",
      "role": "assistant"
    },
    {
      "role": "user",
      "content": "/*global define*/\n'use strict';\n\n/**\n * Services that persists and retrieves TODOs from localStorage.\n */\n \ndefine([\n\t'angular'\n], function (angular) {\n\tvar moduleName = 'TodoStorageModule';\n\tangular\n\t\t.module(moduleName, [])\n\t\t.factory('todoStorage', function () {\n\t\t\tvar STORAGE_ID = 'todos-angularjs-requirejs';\n\n\t\t\treturn {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn JSON.parse(localStorage.getItem(STORAGE_ID) || '[]');\n\t\t\t\t},\n\n\t\t\t\tput: function (todos) {\n\t\t\t\t\tlocalStorage.setItem(STORAGE_ID, JSON.stringify(todos));\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\treturn moduleName;\n});\n"
    },
    {
      "content": "Give me the content of js/app.js",
      "role": "assistant"
    },
    {
      "role": "user",
      "content": "/*global require*/\n'use strict';\n\nrequire([\n\t'angular'\n], function (angular) {\n\trequire([\n\t\t'controllers/todo', \n\t\t'directives/todoFocus', \n\t\t'directives/todoEscape',\n\t\t'services/todoStorage'\n\t], function (todoCtrl, todoFocusDir, todoEscapeDir, todoStorageSrv) {\n\t\tangular\n\t\t\t.module('todomvc', [todoFocusDir, todoEscapeDir, todoStorageSrv])\n\t\t\t.controller('TodoController', todoCtrl);\n\t\tangular.bootstrap(document, ['todomvc']);\t\t\t\n\t});\t\n});\n"
    },
    {
      "content": "Give me the content of js/main.js",
      "role": "assistant"
    },
    {
      "role": "user",
      "content": "/*global require*/\n'use strict';\n\nrequire.config({\n\tpaths: {\n\t\tangular: '../node_modules/angular/angular'\n\t},\n\tshim: {\n\t\tangular: {\n\t\t\texports: 'angular'\n\t\t}\n\t},\n\tdeps: ['app']\n});\n"
    },
    {
      "content": "Give me the content of index.html",
      "role": "assistant"
    },
    {
      "role": "user",
      "content": "<!doctype html>\n<html lang=\"en\" data-framework=\"angularjs\">\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title>AngularJS & RequireJS â€¢ TodoMVC</title>\n\t\t<link rel=\"stylesheet\" href=\"node_modules/todomvc-common/base.css\">\n\t\t<link rel=\"stylesheet\" href=\"node_modules/todomvc-app-css/index.css\">\n\t\t<style>[ng-cloak] { display: none; }</style>\n\t</head>\n\t<body>\n\t\t<section class=\"todoapp\" ng-controller=\"TodoController\">\n\t\t\t<header class=\"header\">\n\t\t\t\t<h1>todos</h1>\n\t\t\t\t<form class=\"todo-form\" ng-submit=\"addTodo()\">\n\t\t\t\t\t<input class=\"new-todo\" placeholder=\"What needs to be done?\" ng-model=\"newTodo\" autofocus>\n\t\t\t\t</form>\n\t\t\t</header>\n\t\t\t<section class=\"main\" ng-show=\"todos.length\" ng-cloak>\n\t\t\t\t<input id=\"toggle-all\" class=\"toggle-all\" type=\"checkbox\" ng-model=\"allChecked\" ng-click=\"markAll(allChecked)\">\n\t\t\t\t<label for=\"toggle-all\">Mark all as complete</label>\n\t\t\t\t<ul class=\"todo-list\">\n\t\t\t\t\t<li ng-repeat=\"todo in todos | filter:statusFilter track by $index\" ng-class=\"{completed: todo.completed, editing: todo == editedTodo}\">\n\t\t\t\t\t\t<div class=\"view\">\n\t\t\t\t\t\t\t<input class=\"toggle\" type=\"checkbox\" ng-model=\"todo.completed\">\n\t\t\t\t\t\t\t<label ng-dblclick=\"editTodo(todo)\">{{todo.title}}</label>\n\t\t\t\t\t\t\t<button class=\"destroy\" ng-click=\"removeTodo(todo)\"></button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<form ng-submit=\"doneEditing(todo)\">\n\t\t\t\t\t\t\t<input class=\"edit\" ng-trim=\"false\" ng-model=\"todo.title\" ng-blur=\"doneEditing(todo)\" todo-escape=\"revertEditing(todo)\" todo-focus=\"todo == editedTodo\">\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</section>\n\t\t\t<footer class=\"footer\" ng-show=\"todos.length\" ng-cloak>\n\t\t\t\t<span class=\"todo-count\"><strong>{{remainingCount}}</strong>\n\t\t\t\t\t<ng-pluralize count=\"remainingCount\" when=\"{ one: 'item left', other: 'items left' }\"></ng-pluralize>\n\t\t\t\t</span>\n\t\t\t\t<ul class=\"filters\">\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<a ng-class=\"{selected: location.path() == '/'} \" href=\"#/\">All</a>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<a ng-class=\"{selected: location.path() == '/active'}\" href=\"#/active\">Active</a>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<a ng-class=\"{selected: location.path() == '/completed'}\" href=\"#/completed\">Completed</a>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t\t<button class=\"clear-completed\" ng-click=\"clearDoneTodos()\" ng-show=\"remainingCount < todos.length\">Clear completed</button>\n\t\t\t</footer>\n\t\t</section>\n\t\t<footer class=\"info\">\n\t\t\t<p>Double-click to edit a todo</p>\n\t\t\t<p>Credits:\n\t\t\t\t<a href=\"http://twitter.com/cburgdorf\">Christoph Burgdorf</a>,\n\t\t\t\t<a href=\"http://ericbidelman.com\">Eric Bidelman</a>,\n\t\t\t\t<a href=\"http://jacobmumm.com\">Jacob Mumm</a>,\n\t\t\t\t<a href=\"http://blog.igorminar.com\">Igor Minar</a> and\n\t\t\t\t<a href=\"http://twitter.com/passy\">Pascal Hartig</a>\n\t\t\t</p>\n\t\t\t<p>Part of <a href=\"http://todomvc.com\">TodoMVC</a></p>\n\t\t</footer>\n\t\t<script src=\"node_modules/todomvc-common/base.js\"></script>\n\t\t<script data-main=\"js/main\" src=\"node_modules/requirejs/require.js\"></script>\n\t</body>\n</html>\n"
    },
    {
      "role": "assistant",
      "content": "Based on the provided AngularJS code, here's the new file structure for the translated React application:\n\n1. src/App.tsx\n2. src/components/Header.tsx\n3. src/components/TodoList.tsx\n4. src/components/TodoItem.tsx\n5. src/components/Footer.tsx\n6. src/store/todoSlice.ts\n7. src/store/store.ts\n8. src/hooks/useEscape.ts\n9. src/hooks/useFocus.ts\n10. src/index.tsx\n11. public/index.html\n\nPlease let me know which file you would like me to provide the translated code for."
    },
    {
      "role": "user",
      "content": "1"
    },
    {
      "role": "assistant",
      "content": "```tsx\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport Header from './components/Header';\nimport TodoList from './components/TodoList';\nimport Footer from './components/Footer';\nimport { RootState } from './store/store';\n\nconst App: React.FC = () => {\n  const todos = useSelector((state: RootState) => state.todos);\n\n  return (\n    <section className=\"todoapp\">\n      <Header />\n      {todos.length > 0 && (\n        <>\n          <TodoList />\n          <Footer />\n        </>\n      )}\n    </section>\n  );\n};\n\nexport default App;\n```"
    },
    {
      "role": "user",
      "content": "2"
    },
    {
      "role": "assistant",
      "content": "```tsx\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addTodo } from '../store/todoSlice';\n\nconst Header: React.FC = () => {\n  const [newTodo, setNewTodo] = useState('');\n  const dispatch = useDispatch();\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (newTodo.trim()) {\n      dispatch(addTodo(newTodo.trim()));\n      setNewTodo('');\n    }\n  };\n\n  return (\n    <header className=\"header\">\n      <h1>todos</h1>\n      <form className=\"todo-form\" onSubmit={handleSubmit}>\n        <input\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={newTodo}\n          onChange={(e) => setNewTodo(e.target.value)}\n          autoFocus\n        />\n      </form>\n    </header>\n  );\n};\n\nexport default Header;\n```"
    },
    {
      "role": "user",
      "content": "3"
    },
    {
      "role": "assistant",
      "content": "```tsx\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport TodoItem from './TodoItem';\nimport { RootState } from '../store/store';\n\nconst TodoList: React.FC = () => {\n  const todos = useSelector((state: RootState) => state.todos);\n  const statusFilter = useSelector((state: RootState) => state.statusFilter);\n\n  const filteredTodos = todos.filter((todo) => {\n    if (statusFilter === 'active') {\n      return !todo.completed;\n    } else if (statusFilter === 'completed') {\n      return todo.completed;\n    }\n    return true;\n  });\n\n  return (\n    <section className=\"main\">\n      <input\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        type=\"checkbox\"\n        checked={todos.every((todo) => todo.completed)}\n        onChange={(e) => todos.forEach((todo) => (todo.completed = e.target.checked))}\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n      <ul className=\"todo-list\">\n        {filteredTodos.map((todo) => (\n          <TodoItem key={todo.id} todo={todo} />\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nexport default TodoList;\n```"
    },
    {
      "role": "user",
      "content": "4"
    },
    {
      "role": "assistant",
      "content":"```tsx\nimport React, { useState, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { removeTodo, updateTodo } from '../store/todoSlice';\nimport useEscape from '../hooks/useEscape';\nimport useFocus from '../hooks/useFocus';\n\ninterface TodoItemProps {\n  todo: {\n    id: string;\n    title: string;\n    completed: boolean;\n  };\n}\n\nconst TodoItem: React.FC<TodoItemProps> = ({ todo }) => {\n  const [editing, setEditing] = useState(false);\n  const [editedTitle, setEditedTitle] = useState(todo.title);\n  const dispatch = useDispatch();\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const handleDoubleClick = () => {\n    setEditing(true);\n  };\n\n  const handleSave = () => {\n    const trimmedTitle = editedTitle.trim();\n    if (trimmedTitle) {\n      dispatch(updateTodo({ ...todo, title: trimmedTitle }));\n    } else {\n      dispatch(removeTodo(todo.id));\n    }\n    setEditing(false);\n  };\n\n  const handleCancel = () => {\n    setEditedTitle(todo.title);\n    setEditing(false);\n  };\n\n  useEscape(handleCancel);\n  useFocus(inputRef, editing);\n\n  return (\n    <li className={`${todo.completed ? 'completed' : ''} ${editing ? 'editing' : ''}`}>\n      <div className=\"view\">\n        <input\n          className=\"toggle\"\n          type=\"checkbox\"\n          checked={todo.completed}\n          onChange={() => dispatch(updateTodo({ ...todo, completed: !todo.completed }))}\n        />\n        <label onDoubleClick={handleDoubleClick}>{todo.title}</label>\n        <button className=\"destroy\" onClick={() => dispatch(removeTodo(todo.id))}></button>\n      </div>\n      {editing && (\n        <input\n          ref={inputRef}\n          className=\"edit\"\n          value={editedTitle}\n          onChange={(e) => setEditedTitle(e.target.value)}\n          onBlur={handleSave}\n          onKeyDown={(e) => {\n            if (e.key === 'Enter') {\n              handleSave();\n            }\n          }}\n        />\n      )}\n    </li>\n  );\n};\n\nexport default TodoItem;\n```"
    },
    {
      "role": "user",
      "content": "5"
    },
    {
      "role": "assistant",
      "content": "```tsx\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { clearCompleted, setStatusFilter } from '../store/todoSlice';\nimport { RootState } from '../store/store';\n\nconst Footer: React.FC = () => {\n  const todos = useSelector((state: RootState) => state.todos);\n  const statusFilter = useSelector((state: RootState) => state.statusFilter);\n  const dispatch = useDispatch();\n\n  const remainingCount = todos.filter((todo) => !todo.completed).length;\n  const completedCount = todos.length - remainingCount;\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        <strong>{remainingCount}</strong> {remainingCount === 1 ? 'item' : 'items'} left\n      </span>\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            className={statusFilter === 'all' ? 'selected' : ''}\n            onClick={() => dispatch(setStatusFilter('all'))}\n          >\n            All\n          </a>\n        </li>\n        <li>\n          <a\n            href=\"#/active\"\n            className={statusFilter === 'active' ? 'selected' : ''}\n            onClick={() => dispatch(setStatusFilter('active'))}\n          >\n            Active\n          </a>\n        </li>\n        <li>\n          <a\n            href=\"#/completed\"\n            className={statusFilter === 'completed' ? 'selected' : ''}\n            onClick={() => dispatch(setStatusFilter('completed'))}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n      {completedCount > 0 && (\n        <button className=\"clear-completed\" onClick={() => dispatch(clearCompleted())}>\n          Clear completed\n        </button>\n      )}\n    </footer>\n  );\n};\n\nexport default Footer;\n```"
    },
    {
      "role": "user",
      "content": "6"
    },
    {
      "role": "assistant",
      "content": "```ts\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { nanoid } from 'nanoid';\n\ninterface Todo {\n  id: string;\n  title: string;\n  completed: boolean;\n}\n\ninterface TodoState {\n  todos: Todo[];\n  statusFilter: 'all' | 'active' | 'completed';\n}\n\nconst initialState: TodoState = {\n  todos: [],\n  statusFilter: 'all',\n};\n\nconst todoSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    addTodo: (state, action: PayloadAction<string>) => {\n      const newTodo: Todo = {\n        id: nanoid(),\n        title: action.payload,\n        completed: false,\n      };\n      state.todos.push(newTodo);\n    },\n    removeTodo: (state, action: PayloadAction<string>) => {\n      state.todos = state.todos.filter((todo) => todo.id !== action.payload);\n    },\n    updateTodo: (state, action: PayloadAction<Todo>) => {\n      const index = state.todos.findIndex((todo) => todo.id === action.payload.id);\n      if (index !== -1) {\n        state.todos[index] = action.payload;\n      }\n    },\n    clearCompleted: (state) => {\n      state.todos = state.todos.filter((todo) => !todo.completed);\n    },\n    setStatusFilter: (state, action: PayloadAction<'all' | 'active' | 'completed'>) => {\n      state.statusFilter = action.payload;\n    },\n  },\n});\n\nexport const { addTodo, removeTodo, updateTodo, clearCompleted, setStatusFilter } = todoSlice.actions;\n\nexport default todoSlice.reducer;\n```"
    },
    {
      "role": "user",
      "content": "7"
    },
    {
      "role": "assistant",
      "content":"```ts\nimport { configureStore } from '@reduxjs/toolkit';\nimport todoReducer from './todoSlice';\n\nconst store = configureStore({\n  reducer: {\n    todos: todoReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n```"
    },
    {
      "role": "user",
      "content": "8"
    },
    {
      "role": "assistant",
      "content":"```ts\nimport { useEffect } from 'react';\n\nconst useEscape = (onEscape: () => void) => {\n  useEffect(() => {\n    const handleEscape = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        onEscape();\n      }\n    };\n\n    document.addEventListener('keydown', handleEscape);\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n    };\n  }, [onEscape]);\n};\n\nexport default useEscape;\n```"
    },
    {
      "role": "user",
      "content": "9"
    },
    {
      "role": "assistant",
      "content":"```ts\nimport { useEffect, RefObject } from 'react';\n\nconst useFocus = (ref: RefObject<HTMLInputElement>, shouldFocus: boolean) => {\n  useEffect(() => {\n    if (shouldFocus && ref.current) {\n      ref.current.focus();\n    }\n  }, [ref, shouldFocus]);\n};\n\nexport default useFocus;\n```"
    },
    {
      "role": "user",
      "content": "10"
    },
    {
      "role": "assistant",
      "content": "```tsx\nimport React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\nimport App from './App';\nimport 'todomvc-app-css/index.css';\n\nconst rootElement = document.getElementById('root');\nif (rootElement) {\n  createRoot(rootElement).render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>\n  );\n}\n```"
    }
  ]
}