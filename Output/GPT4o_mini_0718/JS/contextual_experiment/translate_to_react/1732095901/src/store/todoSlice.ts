import { createSlice, PayloadAction } from '@reduxjs/toolkit'; import { nanoid } from 'nanoid'; import { Todo } from '../types/todo'; interface TodoState { todos: Todo[]; } const initialState: TodoState = { todos: [], }; const todoSlice = createSlice({ name: 'todos', initialState, reducers: { addTodo: { reducer: (state, action: PayloadAction<Todo>) => { state.todos.push(action.payload); }, prepare: (title: string) => ({ payload: { id: nanoid(), title, completed: false, }, }), }, removeTodo: (state, action: PayloadAction<string>) => { state.todos = state.todos.filter(todo => todo.id !== action.payload); }, toggleTodo: (state, action: PayloadAction<string>) => { const todo = state.todos.find(todo => todo.id === action.payload); if (todo) { todo.completed = !todo.completed; } }, clearCompleted: (state) => { state.todos = state.todos.filter(todo => !todo.completed); }, markAll: (state, action: PayloadAction<boolean>) => { state.todos.forEach(todo => { todo.completed = action.payload; }); }, }, }); export const { addTodo, removeTodo, toggleTodo, clearCompleted, markAll } = todoSlice.actions; export default todoSlice.reducer;