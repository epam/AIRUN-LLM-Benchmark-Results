import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { nanoid } from \"nanoid\";\n\ninterface Todo {\n  id: string;\n  title: string;\n  completed: boolean;\n}\n\ninterface TodosState {\n  todos: Todo[];\n  filter: \"all\" | \"active\" | \"completed\";\n}\n\nconst initialState: TodosState = {\n  todos: [],\n  filter: \"all\",\n};\n\nconst todosSlice = createSlice({\n  name: \"todos\",\n  initialState,\n  reducers: {\n    addTodo: (state, action: PayloadAction<string>) => {\n      state.todos.push({\n        id: nanoid(),\n        title: action.payload,\n        completed: false,\n      });\n    },\n    toggleTodo: (state, action: PayloadAction<string>) => {\n      const todo = state.todos.find((todo) => todo.id === action.payload);\n      if (todo) {\n        todo.completed = !todo.completed;\n      }\n    },\n    deleteTodo: (state, action: PayloadAction<string>) => {\n      state.todos = state.todos.filter((todo) => todo.id !== action.payload);\n    },\n    editTodo: (\n      state,\n      action: PayloadAction<{ id: string; newTitle: string }>\n    ) => {\n      const todo = state.todos.find((todo) => todo.id === action.payload.id);\n      if (todo) {\n        todo.title = action.payload.newTitle;\n      }\n    },\n    toggleAll: (state) => {\n      const areAllCompleted = state.todos.every((todo) => todo.completed);\n      state.todos.forEach((todo) => (todo.completed = !areAllCompleted));\n    },\n    clearCompleted: (state) => {\n      state.todos = state.todos.filter((todo) => !todo.completed);\n    },\n    setFilter: (state, action: PayloadAction<\"all\" | \"active\" | \"completed\">) => {\n      state.filter = action.payload;\n    },\n  },\n});\n\nexport const {\n  addTodo,\n  toggleTodo,\n  deleteTodo,\n  editTodo,\n  toggleAll,\n  clearCompleted,\n  setFilter,\n} = todosSlice.actions;\n\nexport default todosSlice.reducer;