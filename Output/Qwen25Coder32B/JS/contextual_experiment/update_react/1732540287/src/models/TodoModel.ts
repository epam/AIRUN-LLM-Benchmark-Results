import { nanoid } from 'nanoid';\n\ninterface ITodo {\n  id: string;\n  title: string;\n  completed: boolean;\n}\n\ninterface ITodoModel {\n  key: string;\n  todos: Array<ITodo>;\n  onChanges: Array<() => void>;\n  subscribe: (onChange: () => void) => void;\n  inform: () => void;\n  addTodo: (title: string) => void;\n  toggleAll: (checked: boolean) => void;\n  toggle: (todoToToggle: ITodo) => void;\n  destroy: (todo: ITodo) => void;\n  save: (todoToSave: ITodo, text: string) => void;\n  clearCompleted: () => void;\n}\n\nclass TodoModel implements ITodoModel {\n  public key: string;\n  public todos: Array<ITodo>;\n  public onChanges: Array<() => void>;\n\n  constructor(key: string) {\n    this.key = key;\n    this.todos = JSON.parse(localStorage.getItem(key) || '[]');\n    this.onChanges = [];\n  }\n\n  public subscribe(onChange: () => void) {\n    this.onChanges.push(onChange);\n  }\n\n  public inform() {\n    localStorage.setItem(this.key, JSON.stringify(this.todos));\n    this.onChanges.forEach((cb) => cb());\n  }\n\n  public addTodo(title: string) {\n    this.todos = this.todos.concat({\n      id: nanoid(),\n      title: title,\n      completed: false,\n    });\n\n    this.inform();\n  }\n\n  public toggleAll(checked: boolean) {\n    this.todos = this.todos.map((todo) => ({\n      ...todo,\n      completed: checked,\n    }));\n\n    this.inform();\n  }\n\n  public toggle(todoToToggle: ITodo) {\n    this.todos = this.todos.map((todo) =>\n      todo !== todoToToggle ? todo : { ...todo, completed: !todo.completed }\n    );\n\n    this.inform();\n  }\n\n  public destroy(todo: ITodo) {\n    this.todos = this.todos.filter((candidate) => candidate !== todo);\n\n    this.inform();\n  }\n\n  public save(todoToSave: ITodo, text: string) {\n    this.todos = this.todos.map((todo) =>\n      todo !== todoToSave ? todo : { ...todo, title: text }\n    );\n\n    this.inform();\n  }\n\n  public clearCompleted() {\n    this.todos = this.todos.filter((todo) => !todo.completed);\n\n    this.inform();\n  }\n}\n\nexport { TodoModel };