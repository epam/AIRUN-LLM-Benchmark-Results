{
  "anthropic_version": "vertex-2023-10-16",
  "max_tokens": 4096,
  "temperature": 0,
  "stream": false,
  "system": "As an AI proficient in software engineering, particularly in Frontend development and React 18.Ñ…, your objective is to resolve the provided development tasks.",
  "messages": [
    {
      "role": "user",
      "content": "Your task is to translate outdated React app code to modern version of React. You may replace old implementations with new technologies and libraries.\nApplication is composed of the following files:\napp.tsx\nconstants.ts\nfooter.tsx\ntodoItem.tsx\ntodoModel.ts\nutils.ts\n\nYour task is to request content of each file and analyze its implementation.\nYou should ask for files content by the command: \"Give me the content of <file.extenstion>\"\n\nAfter getting and analyzing of all file's content - think thoroughly and *return only new file structure* of updated React application in a form of list. After you return the file structure of the updated application, I will request you for each file by its number in the list\nWhile updating application - follow next instructions:\n- Use the following libraries: TypeScript, Redux Toolkit with createSlice, and nanoid.\n- Split the code into separate components.\n- Optimize the code where possible.\n- The converted code should not contain any TODOs.\n- Return the translated code as markdown code snippets.\n- Simply return the codebase without additional comments or explanations on how to convert it.\n\nExample of response where number is an alias for file:\n1 - ./App.tsx\n2 - ./constants.ts\n3 - ..\n..\n\nDo not add any comments and follow the instructions precisely."
    },
    {
      "content": "Give me the content of app.tsx",
      "role": "assistant"
    },
    {
      "role": "user",
      "content": "declare var Router;\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { TodoModel } from \"./todoModel\";\nimport { TodoFooter } from \"./footer\";\nimport { TodoItem } from \"./todoItem\";\nimport { ALL_TODOS, ACTIVE_TODOS, COMPLETED_TODOS, ENTER_KEY } from \"./constants\";\n\nclass TodoApp extends React.Component<IAppProps, IAppState> {\n\n  public state : IAppState;\n\n  constructor(props : IAppProps) {\n    super(props);\n    this.state = {\n      nowShowing: ALL_TODOS,\n      editing: null\n    };\n  }\n\n  public componentDidMount() {\n    var setState = this.setState;\n    var router = Router({\n      '/': setState.bind(this, {nowShowing: ALL_TODOS}),\n      '/active': setState.bind(this, {nowShowing: ACTIVE_TODOS}),\n      '/completed': setState.bind(this, {nowShowing: COMPLETED_TODOS})\n    });\n    router.init('/');\n  }\n\n  public handleNewTodoKeyDown(event : React.KeyboardEvent) {\n    if (event.keyCode !== ENTER_KEY) {\n      return;\n    }\n\n    event.preventDefault();\n\n    var val = (ReactDOM.findDOMNode(this.refs[\"newField\"]) as HTMLInputElement).value.trim();\n\n    if (val) {\n      this.props.model.addTodo(val);\n      (ReactDOM.findDOMNode(this.refs[\"newField\"]) as HTMLInputElement).value = '';\n    }\n  }\n\n  public toggleAll(event : React.FormEvent) {\n    var target : any = event.target;\n    var checked = target.checked;\n    this.props.model.toggleAll(checked);\n  }\n\n  public toggle(todoToToggle : ITodo) {\n    this.props.model.toggle(todoToToggle);\n  }\n\n  public destroy(todo : ITodo) {\n    this.props.model.destroy(todo);\n  }\n\n  public edit(todo : ITodo) {\n    this.setState({editing: todo.id});\n  }\n\n  public save(todoToSave : ITodo, text : String) {\n    this.props.model.save(todoToSave, text);\n    this.setState({editing: null});\n  }\n\n  public cancel() {\n    this.setState({editing: null});\n  }\n\n  public clearCompleted() {\n    this.props.model.clearCompleted();\n  }\n\n  public render() {\n    var footer;\n    var main;\n    const todos = this.props.model.todos;\n\n    var shownTodos = todos.filter((todo) => {\n      switch (this.state.nowShowing) {\n      case ACTIVE_TODOS:\n        return !todo.completed;\n      case COMPLETED_TODOS:\n        return todo.completed;\n      default:\n        return true;\n      }\n    });\n\n    var todoItems = shownTodos.map((todo) => {\n      return (\n        <TodoItem\n          key={todo.id}\n          todo={todo}\n          onToggle={this.toggle.bind(this, todo)}\n          onDestroy={this.destroy.bind(this, todo)}\n          onEdit={this.edit.bind(this, todo)}\n          editing={this.state.editing === todo.id}\n          onSave={this.save.bind(this, todo)}\n          onCancel={ e => this.cancel() }\n        />\n      );\n    });\n\n    // Note: It's usually better to use immutable data structures since they're\n    // easier to reason about and React works very well with them. That's why\n    // we use map(), filter() and reduce() everywhere instead of mutating the\n    // array or todo items themselves.\n    var activeTodoCount = todos.reduce(function (accum, todo) {\n      return todo.completed ? accum : accum + 1;\n    }, 0);\n\n    var completedCount = todos.length - activeTodoCount;\n\n    if (activeTodoCount || completedCount) {\n      footer =\n        <TodoFooter\n          count={activeTodoCount}\n          completedCount={completedCount}\n          nowShowing={this.state.nowShowing}\n          onClearCompleted={ e=> this.clearCompleted() }\n        />;\n    }\n\n    if (todos.length) {\n      main = (\n        <section className=\"main\">\n          <input\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            type=\"checkbox\"\n            onChange={ e => this.toggleAll(e) }\n            checked={activeTodoCount === 0}\n          />\n          <label\n            htmlFor=\"toggle-all\"\n          >\n            Mark all as complete\n          </label>\n          <ul className=\"todo-list\">\n            {todoItems}\n          </ul>\n        </section>\n      );\n    }\n\n    return (\n      <div>\n        <header className=\"header\">\n          <h1>todos</h1>\n          <input\n            ref=\"newField\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            onKeyDown={ e => this.handleNewTodoKeyDown(e) }\n            autoFocus={true}\n          />\n        </header>\n        {main}\n        {footer}\n      </div>\n    );\n  }\n}\n\nvar model = new TodoModel('react-todos');\n\nfunction render() {\n  ReactDOM.render(\n    <TodoApp model={model}/>,\n    document.getElementsByClassName('todoapp')[0]\n  );\n}\n\nmodel.subscribe(render);\nrender();\n"
    },
    {
      "content": "Give me the content of constants.ts",
      "role": "assistant"
    },
    {
      "role": "user",
      "content": "const ALL_TODOS = 'all';\nconst ACTIVE_TODOS = 'active';\nconst COMPLETED_TODOS = 'completed';\nconst ENTER_KEY = 13;\nconst ESCAPE_KEY = 27;\nexport { ALL_TODOS, ACTIVE_TODOS, COMPLETED_TODOS, ENTER_KEY, ESCAPE_KEY };\n"
    },
    {
      "content": "Give me the content of footer.tsx",
      "role": "assistant"
    },
    {
      "role": "user",
      "content": "import * as classNames from \"classnames\";\nimport * as React from \"react\";\nimport { ALL_TODOS, ACTIVE_TODOS, COMPLETED_TODOS } from \"./constants\";\nimport { Utils } from \"./utils\";\n\nclass TodoFooter extends React.Component<ITodoFooterProps, {}> {\n\n  public render() {\n    var activeTodoWord = Utils.pluralize(this.props.count, 'item');\n    var clearButton = null;\n\n    if (this.props.completedCount > 0) {\n      clearButton = (\n        <button\n          className=\"clear-completed\"\n          onClick={this.props.onClearCompleted}>\n          Clear completed\n        </button>\n      );\n    }\n\n    const nowShowing = this.props.nowShowing;\n    return (\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          <strong>{this.props.count}</strong> {activeTodoWord} left\n        </span>\n        <ul className=\"filters\">\n          <li>\n            <a\n              href=\"#/\"\n              className={classNames({selected: nowShowing === ALL_TODOS})}>\n                All\n            </a>\n          </li>\n          {' '}\n          <li>\n            <a\n              href=\"#/active\"\n              className={classNames({selected: nowShowing === ACTIVE_TODOS})}>\n                Active\n            </a>\n          </li>\n          {' '}\n          <li>\n            <a\n              href=\"#/completed\"\n              className={classNames({selected: nowShowing === COMPLETED_TODOS})}>\n                Completed\n            </a>\n          </li>\n        </ul>\n        {clearButton}\n      </footer>\n    );\n  }\n}\n\nexport { TodoFooter };\n"
    },
    {
      "content": "Give me the content of todoItem.tsx",
      "role": "assistant"
    },
    {
      "role": "user",
      "content": "import * as classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { ENTER_KEY, ESCAPE_KEY } from \"./constants\";\n\nclass TodoItem extends React.Component<ITodoItemProps, ITodoItemState> {\n\n  public state : ITodoItemState;\n\n  constructor(props : ITodoItemProps){\n    super(props);\n    this.state = { editText: this.props.todo.title };\n  }\n\n  public handleSubmit(event : React.FormEvent) {\n    var val = this.state.editText.trim();\n    if (val) {\n      this.props.onSave(val);\n      this.setState({editText: val});\n    } else {\n      this.props.onDestroy();\n    }\n  }\n\n  public handleEdit() {\n    this.props.onEdit();\n    this.setState({editText: this.props.todo.title});\n  }\n\n  public handleKeyDown(event : React.KeyboardEvent) {\n    if (event.keyCode === ESCAPE_KEY) {\n      this.setState({editText: this.props.todo.title});\n      this.props.onCancel(event);\n    } else if (event.keyCode === ENTER_KEY) {\n      this.handleSubmit(event);\n    }\n  }\n\n  public handleChange(event : React.FormEvent) {\n    var input : any = event.target;\n    this.setState({ editText : input.value });\n  }\n\n  /**\n   * This is a completely optional performance enhancement that you can\n   * implement on any React component. If you were to delete this method\n   * the app would still work correctly (and still be very performant!), we\n   * just use it as an example of how little code it takes to get an order\n   * of magnitude performance improvement.\n   */\n  public shouldComponentUpdate(nextProps : ITodoItemProps, nextState : ITodoItemState) {\n    return (\n      nextProps.todo !== this.props.todo ||\n      nextProps.editing !== this.props.editing ||\n      nextState.editText !== this.state.editText\n    );\n  }\n\n  /**\n   * Safely manipulate the DOM after updating the state when invoking\n   * `this.props.onEdit()` in the `handleEdit` method above.\n   * For more info refer to notes at https://facebook.github.io/react/docs/component-api.html#setstate\n   * and https://facebook.github.io/react/docs/component-specs.html#updating-componentdidupdate\n   */\n  public componentDidUpdate(prevProps : ITodoItemProps) {\n    if (!prevProps.editing && this.props.editing) {\n      var node = (ReactDOM.findDOMNode(this.refs[\"editField\"]) as HTMLInputElement);\n      node.focus();\n      node.setSelectionRange(node.value.length, node.value.length);\n    }\n  }\n\n  public render() {\n    return (\n      <li className={classNames({\n        completed: this.props.todo.completed,\n        editing: this.props.editing\n      })}>\n        <div className=\"view\">\n          <input\n            className=\"toggle\"\n            type=\"checkbox\"\n            checked={this.props.todo.completed}\n            onChange={this.props.onToggle}\n          />\n          <label onDoubleClick={ e => this.handleEdit() }>\n            {this.props.todo.title}\n          </label>\n          <button className=\"destroy\" onClick={this.props.onDestroy} />\n        </div>\n        <input\n          ref=\"editField\"\n          className=\"edit\"\n          value={this.state.editText}\n          onBlur={ e => this.handleSubmit(e) }\n          onChange={ e => this.handleChange(e) }\n          onKeyDown={ e => this.handleKeyDown(e) }\n        />\n      </li>\n    );\n  }\n}\n\nexport { TodoItem };\n"
    },
    {
      "content": "Give me the content of todoModel.ts",
      "role": "assistant"
    },
    {
      "role": "user",
      "content": "import { Utils } from \"./utils\";\nclass TodoModel implements ITodoModel {\n  public key : string;\n  public todos : Array<ITodo>;\n  public onChanges : Array<any>;\n\n  constructor(key) {\n    this.key = key;\n    this.todos = Utils.store(key);\n    this.onChanges = [];\n  }\n\n  public subscribe(onChange) {\n    this.onChanges.push(onChange);\n  }\n\n  public inform() {\n    Utils.store(this.key, this.todos);\n    this.onChanges.forEach(function (cb) { cb(); });\n  }\n\n  public addTodo(title : string) {\n    this.todos = this.todos.concat({\n      id: Utils.uuid(),\n      title: title,\n      completed: false\n    });\n\n    this.inform();\n  }\n\n  public toggleAll(checked : Boolean) {\n    // Note: It's usually better to use immutable data structures since they're\n    // easier to reason about and React works very well with them. That's why\n    // we use map(), filter() and reduce() everywhere instead of mutating the\n    // array or todo items themselves.\n    this.todos = this.todos.map<ITodo>((todo : ITodo) => {\n      return Utils.extend({}, todo, {completed: checked});\n    });\n\n    this.inform();\n  }\n\n  public toggle(todoToToggle : ITodo) {\n    this.todos = this.todos.map<ITodo>((todo : ITodo) => {\n      return todo !== todoToToggle ?\n        todo :\n        Utils.extend({}, todo, {completed: !todo.completed});\n    });\n\n    this.inform();\n  }\n\n  public destroy(todo : ITodo) {\n    this.todos = this.todos.filter(function (candidate) {\n      return candidate !== todo;\n    });\n\n    this.inform();\n  }\n\n  public save(todoToSave : ITodo, text : string) {\n    this.todos = this.todos.map(function (todo) {\n      return todo !== todoToSave ? todo : Utils.extend({}, todo, {title: text});\n    });\n\n    this.inform();\n  }\n\n  public clearCompleted() {\n    this.todos = this.todos.filter(function (todo) {\n      return !todo.completed;\n    });\n\n    this.inform();\n  }\n}\n\nexport { TodoModel };\n"
    },
    {
      "content": "Give me the content of utils.ts",
      "role": "assistant"
    },
    {
      "role": "user",
      "content": "\nclass Utils {\n  public static uuid() : string {\n    var i, random;\n    var uuid = '';\n\n    for (i = 0; i < 32; i++) {\n      random = Math.random() * 16 | 0;\n      if (i === 8 || i === 12 || i === 16 || i === 20) {\n        uuid += '-';\n      }\n      uuid += (i === 12 ? 4 : (i === 16 ? (random & 3 | 8) : random))\n        .toString(16);\n    }\n\n    return uuid;\n  }\n\n  public static pluralize(count: number, word: string) {\n    return count === 1 ? word : word + 's';\n  }\n\n  public static store(namespace : string, data? : any) {\n    if (data) {\n      return localStorage.setItem(namespace, JSON.stringify(data));\n    }\n\n    var store = localStorage.getItem(namespace);\n    return (store && JSON.parse(store)) || [];\n  }\n\n  public static extend(...objs : any[]) : any {\n    var newObj = {};\n    for (var i = 0; i < objs.length; i++) {\n      var obj = objs[i];\n      for (var key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          newObj[key] = obj[key];\n        }\n      }\n    }\n    return newObj;\n  }\n}\n\nexport { Utils };\n"
    },
    {
      "role": "assistant",
      "content": "Based on the provided code, here's the updated file structure of the React application:\n\n1. ./src/App.tsx\n2. ./src/components/TodoFooter.tsx\n3. ./src/components/TodoItem.tsx\n4. ./src/store/todoSlice.ts\n5. ./src/utils/constants.ts\n6. ./src/utils/utils.ts\n7. ./src/store/index.ts"
    },
    {
      "role": "user",
      "content": "1"
    },
    {
      "role": "assistant",
      "content": "```tsx\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from './store';\nimport { addTodo, toggleAll, clearCompleted } from './store/todoSlice';\nimport TodoFooter from './components/TodoFooter';\nimport TodoItem from './components/TodoItem';\nimport { ALL_TODOS, ACTIVE_TODOS, COMPLETED_TODOS, ENTER_KEY } from './utils/constants';\n\nconst App: React.FC = () => {\n  const [nowShowing, setNowShowing] = useState<string>(ALL_TODOS);\n  const [editing, setEditing] = useState<string | null>(null);\n  const todos = useSelector((state: RootState) => state.todos);\n  const dispatch = useDispatch();\n  const newFieldRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    const handleHashChange = () => {\n      const hash = window.location.hash.replace('#/', '');\n      setNowShowing(hash || ALL_TODOS);\n    };\n\n    window.addEventListener('hashchange', handleHashChange);\n    handleHashChange();\n\n    return () => {\n      window.removeEventListener('hashchange', handleHashChange);\n    };\n  }, []);\n\n  const handleNewTodoKeyDown = (event: React.KeyboardEvent) => {\n    if (event.keyCode !== ENTER_KEY) {\n      return;\n    }\n\n    event.preventDefault();\n\n    const val = newFieldRef.current!.value.trim();\n\n    if (val) {\n      dispatch(addTodo(val));\n      newFieldRef.current!.value = '';\n    }\n  };\n\n  const toggleAllTodos = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(toggleAll(event.target.checked));\n  };\n\n  const clearCompletedTodos = () => {\n    dispatch(clearCompleted());\n  };\n\n  const shownTodos = todos.filter((todo) => {\n    switch (nowShowing) {\n      case ACTIVE_TODOS:\n        return !todo.completed;\n      case COMPLETED_TODOS:\n        return todo.completed;\n      default:\n        return true;\n    }\n  });\n\n  const todoItems = shownTodos.map((todo) => (\n    <TodoItem\n      key={todo.id}\n      todo={todo}\n      editing={editing === todo.id}\n      setEditing={setEditing}\n    />\n  ));\n\n  const activeTodoCount = todos.filter((todo) => !todo.completed).length;\n  const completedCount = todos.length - activeTodoCount;\n\n  return (\n    <div>\n      <header className=\"header\">\n        <h1>todos</h1>\n        <input\n          ref={newFieldRef}\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          onKeyDown={handleNewTodoKeyDown}\n          autoFocus\n        />\n      </header>\n      {todos.length > 0 && (\n        <section className=\"main\">\n          <input\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            type=\"checkbox\"\n            onChange={toggleAllTodos}\n            checked={activeTodoCount === 0}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n          <ul className=\"todo-list\">{todoItems}</ul>\n        </section>\n      )}\n      {(activeTodoCount || completedCount) > 0 && (\n        <TodoFooter\n          count={activeTodoCount}\n          completedCount={completedCount}\n          nowShowing={nowShowing}\n          onClearCompleted={clearCompletedTodos}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n```"
    },
    {
      "role": "user",
      "content": "2"
    },
    {
      "role": "assistant",
      "content": "import React from 'react';\nimport classNames from 'classnames';\nimport { ALL_TODOS, ACTIVE_TODOS, COMPLETED_TODOS } from '../utils/constants';\nimport { pluralize } from '../utils/utils';\n\ninterface TodoFooterProps {\n  count: number;\n  completedCount: number;\n  nowShowing: string;\n  onClearCompleted: () => void;\n}\n\nconst TodoFooter: React.FC<TodoFooterProps> = ({\n  count,\n  completedCount,\n  nowShowing,\n  onClearCompleted,\n}) => {\n  const activeTodoWord = pluralize(count, 'item');\n  const clearButton = completedCount > 0 && (\n    <button className=\"clear-completed\" onClick={onClearCompleted}>\n      Clear completed\n    </button>\n  );\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        <strong>{count}</strong> {activeTodoWord} left\n      </span>\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            className={classNames({ selected: nowShowing === ALL_TODOS })}\n          >\n            All\n          </a>\n        </li>\n        {' '}\n        <li>\n          <a\n            href=\"#/active\"\n            className={classNames({ selected: nowShowing === ACTIVE_TODOS })}\n          >\n            Active\n          </a>\n        </li>\n        {' '}\n        <li>\n          <a\n            href=\"#/completed\"\n            className={classNames({ selected: nowShowing === COMPLETED_TODOS })}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n      {clearButton}\n    </footer>\n  );\n};\n\nexport default TodoFooter;\n"
    },
    {
      "role": "user",
      "content": "3"
    },
    {
      "role": "assistant",
      "content": "import React, { useState, useEffect, useRef } from 'react';\\nimport { useDispatch } from 'react-redux';\\nimport classNames from 'classnames';\\nimport { toggleTodo, destroyTodo, editTodo } from '../store/todoSlice';\\nimport { ENTER_KEY, ESCAPE_KEY } from '../utils/constants';\\n\\ninterface TodoItemProps {\\n  todo: {\\n    id: string;\\n    title: string;\\n    completed: boolean;\\n  };\\n  editing: boolean;\\n  setEditing: (id: string | null) => void;\\n}\\n\\nconst TodoItem: React.FC<TodoItemProps> = ({ todo, editing, setEditing }) => {\\n  const [editText, setEditText] = useState(todo.title);\\n  const dispatch = useDispatch();\\n  const editFieldRef = useRef<HTMLInputElement>(null);\\n\\n  const handleSubmit = () => {\\n    const val = editText.trim();\\n    if (val) {\\n      dispatch(editTodo({ id: todo.id, title: val }));\\n      setEditText(val);\\n    } else {\\n      dispatch(destroyTodo(todo.id));\\n    }\\n    setEditing(null);\\n  };\\n\\n  const handleEdit = () => {\\n    setEditing(todo.id);\\n    setEditText(todo.title);\\n  };\\n\\n  const handleKeyDown = (event: React.KeyboardEvent) => {\\n    if (event.keyCode === ESCAPE_KEY) {\\n      setEditText(todo.title);\\n      setEditing(null);\\n    } else if (event.keyCode === ENTER_KEY) {\\n      handleSubmit();\\n    }\\n  };\\n\\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\\n    setEditText(event.target.value);\\n  };\\n\\n  useEffect(() => {\\n    if (editing) {\\n      editFieldRef.current!.focus();\\n      editFieldRef.current!.setSelectionRange(editText.length, editText.length);\\n    }\\n  }, [editing, editText]);\\n\\n  return (\\n    <li\\n      className={classNames({\\n        completed: todo.completed,\\n        editing: editing,\\n      })}\\n    >\\n      <div className=\\\"view\\\">\\n        <input\\n          className=\\\"toggle\\\"\\n          type=\\\"checkbox\\\"\\n          checked={todo.completed}\\n          onChange={() => dispatch(toggleTodo(todo.id))}\\n        />\\n        <label onDoubleClick={handleEdit}>{todo.title}</label>\\n        <button className=\\\"destroy\\\" onClick={() => dispatch(destroyTodo(todo.id))} />\\n      </div>\\n      {editing && (\\n        <input\\n          ref={editFieldRef}\\n          className=\\\"edit\\\"\\n          value={editText}\\n          onBlur={handleSubmit}\\n          onChange={handleChange}\\n          onKeyDown={handleKeyDown}\\n        />\\n      )}\\n    </li>\\n  );\\n};\\n\\nexport default TodoItem;\\n"
    },
    {
      "role": "user",
      "content": "4"
    },
    {
      "role": "assistant",
      "content": "import { createSlice, PayloadAction } from '@reduxjs/toolkit';\\nimport { nanoid } from 'nanoid';\\n\\ninterface Todo {\\n  id: string;\\n  title: string;\\n  completed: boolean;\\n}\\n\\ninterface TodosState {\\n  todos: Todo[];\\n}\\n\\nconst initialState: TodosState = {\\n  todos: [],\\n};\\n\\nconst todoSlice = createSlice({\\n  name: 'todos',\\n  initialState,\\n  reducers: {\\n    addTodo: (state, action: PayloadAction<string>) => {\\n      state.todos.push({\\n        id: nanoid(),\\n        title: action.payload,\\n        completed: false,\\n      });\\n    },\\n    toggleTodo: (state, action: PayloadAction<string>) => {\\n      const todo = state.todos.find((todo) => todo.id === action.payload);\\n      if (todo) {\\n        todo.completed = !todo.completed;\\n      }\\n    },\\n    editTodo: (state, action: PayloadAction<{ id: string; title: string }>) => {\\n      const todo = state.todos.find((todo) => todo.id === action.payload.id);\\n      if (todo) {\\n        todo.title = action.payload.title;\\n      }\\n    },\\n    destroyTodo: (state, action: PayloadAction<string>) => {\\n      state.todos = state.todos.filter((todo) => todo.id !== action.payload);\\n    },\\n    toggleAll: (state, action: PayloadAction<boolean>) => {\\n      state.todos.forEach((todo) => {\\n        todo.completed = action.payload;\\n      });\\n    },\\n    clearCompleted: (state) => {\\n      state.todos = state.todos.filter((todo) => !todo.completed);\\n    },\\n  },\\n});\\n\\nexport const {\\n  addTodo,\\n  toggleTodo,\\n  editTodo,\\n  destroyTodo,\\n  toggleAll,\\n  clearCompleted,\\n} = todoSlice.actions;\\n\\nexport default todoSlice.reducer;\\n"
    },
    {
      "role": "user",
      "content": "5"
    },
    {
      "role": "assistant",
      "content": "export const ALL_TODOS = 'all';\\nexport const ACTIVE_TODOS = 'active';\\nexport const COMPLETED_TODOS = 'completed';\\nexport const ENTER_KEY = 13;\\nexport const ESCAPE_KEY = 27;\\n"
    },
    {
      "role": "user",
      "content": "6"
    },
    {
      "role": "assistant",
      "content": "```typescript\nexport const pluralize = (count: number, word: string) => {\n  return count === 1 ? word : word + 's';\n};\n```"
    },
    {
      "role": "user",
      "content": "7"
    },
    {
      "role": "assistant",
      "content": "```typescript\nimport { configureStore } from '@reduxjs/toolkit';\nimport todoReducer from './todoSlice';\n\nconst store = configureStore({\n  reducer: {\n    todos: todoReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n```"
    }
  ]
}