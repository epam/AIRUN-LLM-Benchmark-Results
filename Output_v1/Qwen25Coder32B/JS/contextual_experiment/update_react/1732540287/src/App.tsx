import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addTodo, toggleAll, setFilter } from '../store/todoSlice';\nimport { ALL_TODOS, ACTIVE_TODOS, COMPLETED_TODOS, ENTER_KEY } from '../constants';\nimport TodoItem from '../components/TodoItem';\nimport TodoFooter from '../components/TodoFooter';\nimport classNames from 'classnames';\nimport { useLocation } from 'react-router-dom';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector((state: any) => state.todos.items);\n  const filter = useSelector((state: any) => state.todos.filter);\n  const [editing, setEditing] = useState<string | null>(null);\n  const newTodoRef = useRef<HTMLInputElement>(null);\n  const location = useLocation();\n\n  useEffect(() => {\n    const path = location.pathname.replace('/', '');\n    dispatch(setFilter(path || ALL_TODOS));\n  }, [location, dispatch]);\n\n  const handleNewTodoKeyDown = (event: React.KeyboardEvent) => {\n    if (event.keyCode !== ENTER_KEY) {\n      return;\n    }\n\n    event.preventDefault();\n\n    if (newTodoRef.current) {\n      const val = newTodoRef.current.value.trim();\n      if (val) {\n        dispatch(addTodo(val));\n        newTodoRef.current.value = '';\n      }\n    }\n  };\n\n  const handleToggleAll = (event: React.FormEvent) => {\n    const target = event.target as HTMLInputElement;\n    dispatch(toggleAll(target.checked));\n  };\n\n  const handleEdit = (id: string) => {\n    setEditing(id);\n  };\n\n  const handleCancel = (event: React.KeyboardEvent) => {\n    setEditing(null);\n  };\n\n  const shownTodos = todos.filter((todo: any) => {\n    switch (filter) {\n      case ACTIVE_TODOS:\n        return !todo.completed;\n      case COMPLETED_TODOS:\n        return todo.completed;\n      default:\n        return true;\n    }\n  });\n\n  const activeTodoCount = todos.filter((todo: any) => !todo.completed).length;\n  const completedCount = todos.length - activeTodoCount;\n\n  return (\n    <div className='todoapp'>\n      <header className='header'>\n        <h1>todos</h1>\n        <input\n          ref={newTodoRef}\n          className='new-todo'\n          placeholder='What needs to be done?'\n          onKeyDown={handleNewTodoKeyDown}\n          autoFocus={true}\n        />\n      </header>\n      {todos.length > 0 && (\n        <section className='main'>\n          <input\n            id='toggle-all'\n            className='toggle-all'\n            type='checkbox'\n            onChange={handleToggleAll}\n            checked={activeTodoCount === 0}\n          />\n          <label htmlFor='toggle-all'>Mark all as complete</label>\n          <ul className='todo-list'>\n            {shownTodos.map((todo: any) => (\n              <TodoItem\n                key={todo.id}\n                todo={todo}\n                editing={editing === todo.id}\n                onEdit={() => handleEdit(todo.id)}\n                onCancel={handleCancel}\n              />\n            ))}\n          </ul>\n        </section>\n      )}\n      {todos.length > 0 && (\n        <TodoFooter\n          count={activeTodoCount}\n          completedCount={completedCount}\n          nowShowing={filter}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;