import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { nanoid } from 'nanoid';\nimport { ITodo } from '../../models/TodoModel';\n\ninterface ITodoState {\n  items: ITodo[];\n  filter: string;\n}\n\nconst initialState: ITodoState = {\n  items: [],\n  filter: 'all',\n};\n\nconst todoSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    addTodo: (state, action: PayloadAction<string>) => {\n      state.items.push({\n        id: nanoid(),\n        title: action.payload,\n        completed: false,\n      });\n    },\n    toggleAll: (state, action: PayloadAction<boolean>) => {\n      state.items = state.items.map((todo) => ({\n        ...todo,\n        completed: action.payload,\n      }));\n    },\n    toggleTodo: (state, action: PayloadAction<string>) => {\n      state.items = state.items.map((todo) =>\n        todo.id === action.payload ? { ...todo, completed: !todo.completed } : todo\n      );\n    },\n    destroyTodo: (state, action: PayloadAction<string>) => {\n      state.items = state.items.filter((todo) => todo.id !== action.payload);\n    },\n    saveTodo: (state, action: PayloadAction<{ id: string; title: string }>) => {\n      state.items = state.items.map((todo) =>\n        todo.id === action.payload.id ? { ...todo, title: action.payload.title } : todo\n      );\n    },\n    clearCompleted: (state) => {\n      state.items = state.items.filter((todo) => !todo.completed);\n    },\n    setFilter: (state, action: PayloadAction<string>) => {\n      state.filter = action.payload;\n    },\n  },\n});\n\nexport const {\n  addTodo,\n  toggleAll,\n  toggleTodo,\n  destroyTodo,\n  saveTodo,\n  clearCompleted,\n  setFilter,\n} = todoSlice.actions;\n\nexport default todoSlice.reducer;